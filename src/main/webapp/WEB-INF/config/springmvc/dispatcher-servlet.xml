<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

    <context:component-scan base-package="hae.**.web">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

<!-- LocaleResolver 선언 시작 -->
    <!-- multi language message Resolver request가 가지고 있는 session으로 부터 locale 정보를 가져온다 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
<!-- LocaleResolver 선언 끝 -->

<!-- Interceptor 선언 시작  -->
    <bean id="commonInterceptor" class="able.com.web.interceptor.CommonInterceptor">
        <property name="localeParamName" value="ABLE_LANGUAGE_SELECTION_PARAM" />
    </bean>
    
    <bean id = "webSecurityInterceptor" class="able.com.web.interceptor.WebSecurityInterceptor" />
<!-- Interceptor 선언 끝 -->

<!-- HandlerMappings 선언 시작 -->
	<!--
 		interceptor 설정에는 2가지 방법이 있다.
			1)ExtendedUriRequestMappingHandler
			2)<mvc:interceptors> 태그 사용
	 -->
<!-- ExtendedUriRequestMappingHandler 설정 시작 -->
<bean id="sessionAnnotationMapper" class="able.com.web.servlet.ExtendedUriRequestMappingHandler" p:order="1">
        <property name="interceptors">
            <list>
                <ref bean="webSecurityInterceptor" />
            </list>
        </property>
        <!--
            [filterType]
            includePattern에 해당하고,  excludeUrlPattern에 해당하지 않는 uri 처리 : 1 (defalut)
            excludeUrlPattern에 해당하지 않거나, includePattern에 해당하는 uri처리 : 2
        -->
        <property name="filterType" value="1"/>
        <!-- interceptor를 적용할  url pattern 목록-->
        <property name="includeUrlPattern">
            <list>
                <value>/**/*.do</value>
            </list>
        </property>
        <!-- interceptor를 적용하지 않을  url pattern 목록-->
        <property name="excludeUrlPattern">
            <list>
                <value>/**/login.do</value>
                <value>/**/logout.do</value>
                <value>/redirectLogin.do</value>
                <!-- Test를 위한 경로 정의 -->
                <value>/basic/*.do</value>
            </list>
        </property>        
    </bean>
    
    <!-- Session 검사를 하지 않는 URL처리를 위한 HandlerMapping -->
    <bean id="annotationMapper" class="able.com.web.servlet.ExtendedUriRequestMappingHandler" p:order="2">
        <property name="interceptors">
            <list>
                <ref bean="commonInterceptor" />
            </list>
        </property>
        <property name="filterType" value="1"/>
        <!-- interceptor를 적용할  url pattern 목록-->
        <property name="includeUrlPattern">
            <list>
                <value>/**/login.do</value>
                <value>/**/logout.do</value>
                <value>/redirectLogin.do</value>
                <!-- Test를 위한 경로 정의 -->
                <value>/basic/*.do</value>
            </list>
        </property>
        <!-- interceptor를 적용하지 않을  url pattern 목록
        <property name="excludeUrlPattern"><list></list></property>          
        -->
    </bean>
<!-- ExtendedUriRequestMappingHandler 설정  끝 -->

	<!-- mvc 태그 사용 설정 시작--> 
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<mvc:interceptors>
		<ref bean="commonInterceptor"/>
		<ref bean="webSecurityInterceptor"/>
		<mvc:interceptor>
			<mvc:mapping path="/**/*.do" />
			interceptor를 적용하지 않을  url pattern 목록
			<mvc:exclude-mapping path="/**/login.do"/>
			<mvc:exclude-mapping path="/**/logout.do"/>
			<mvc:exclude-mapping path="/common/*.do"/>
			<mvc:exclude-mapping path="/cmm/**/*.do"/>
			Test를 위한 경로 정의
			<mvc:exclude-mapping path="/test/**/*.do"/>
			<ref bean="sessionInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors> -->
	<!--mvc 태그 사용 설정 끝  -->
<!-- HandlerMappings 선언 끝  -->


<!-- HandlerAdapters 선언 시작 -->
   
    <!--
        URI 와 매핑되는 Contorller 의 메소드를 실행시 파라미터로 존재하는 객체타입에대한 ArgumentResolver를 실행하여 가져온다
        - This bean processes annotated handler methods, applying Application-specific PropertyEditors
        - for request parameter binding. It overrides the default AnnotationMethodHandlerAdapter.
     -->
    <bean class="able.com.web.servlet.HRequestMappingHandlerAdapter">
        <!-- 
            - ArgumentResolver 처리 우선권
            1. AbleCustomArgumentResolvers
            2. ArgumentResolvers (Spring)
            3. CustomArgumentResolvers 
         -->
        <property name="ableCustomArgumentResolvers">
            <list>
                <bean class="able.com.web.context.HMapHandlerMethodArgumentResolver" />
            </list>
        </property>
        <property name="webBindingInitializer">
            <bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
                <property name="conversionService" ref="conversionService" />
                <property name="validator" ref="validator" />
                <property name="propertyEditorRegistrar" ref="propertyEditorRegistrar" />
            </bean>
        </property>
        <!-- true로 설정 시 Session 별로 직렬로 동작 -->
        <property name="synchronizeOnSession" value="false" />
    </bean>

    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
          <!--  <property name="converters"></property><property name="formatters"></property> -->
    </bean>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
         <!-- Hibernate Validation -->
        <property name="validationMessageSource" ref="messageSource" />
    </bean>

    <bean id="propertyEditorRegistrar" class="able.com.web.bind.CustomPropertyEditorRegistrar" />

<!-- HandlerAdapter 선언 끝 -->

<!-- HandlerExceptionResolvers 선언 시작 -->
    <!--
        - ServletContext 상의 Exception 발생에 따른 처리를 담당
        - This bean resolves specific types of exceptions to corresponding logical
        - view names for error views. The default behaviour of DispatcherServlet
        - is to propagate all exceptions to the servlet container: this will happen
        - here with all other types of exceptions.
    -->
    <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> -->
    <bean class="able.com.exception.resolver.MappingExceptionResolver">
        <property name="interceptor" value="able.com.exception.resolver.DefaultExceptionServiceImpl"/>
        
        <property name="defaultErrorView" value="cmmn/defaultError"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.dao.DataAccessException">cmmn/defaultError</prop>
                <prop key="org.springframework.transaction.TransactionException">cmmn/defaultError</prop>
                <prop key="able.com.exception.BizException">cmmn/defaultError</prop>
                <prop key="org.springframework.security.AccessDeniedException">cmmn/defaultError</prop>
            </props>
        </property>
    </bean>
<!-- HandlerExceptionResolvers 선언 끝 -->
 
<!-- ViewResolver 선언 시작 -->
    <!--
        - 추가적인 어떤 맵핑 작업을 하지 않고 URL의 상징적인 view 이름을 사용하는 ViewResolver
        - 단순 JSP만 사용할 경우 사용이 가능하다.
        - 보통 해당 클래스를 확장하여 제공하는 별도의 ViewResolver를 사용한다.
        - This bean configures the 'prefix' and 'suffix' properties of
        - InternalResourceViewResolver, which resolves logical view names
        - returned by Controllers. For example, a logical view name of "vets"
        - will be mapped to "/WEB-INF/jsp/vets.jsp".
    -->
    <bean id="urlBasedView" class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="0"
        p:viewClass="org.springframework.web.servlet.view.JstlView"
        p:prefix="/WEB-INF/jsp/" p:suffix=".jsp"/>
<!-- ViewResolver 선언 끝 -->

    <!-- Controller에서 처리 로직이 없이 바로 view로 이동하는 경우에 사용하는 Controller
       DispatcherServlet을 거쳐야 하지만, html 위주의 static한 페이지를 보여줄때 사용
       URL path가 곧 뷰이름이 되며, prefix와 suffix를 지정할수도 있다.
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
            p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />
     -->
    <bean id="urlFilenameViewController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>
    
     
</beans>